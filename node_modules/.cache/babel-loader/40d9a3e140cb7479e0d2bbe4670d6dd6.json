{"ast":null,"code":"/*! npm.im/intervalometer */\nfunction intervalometer(cb, request, cancel, requestParameter) {\n  var requestId;\n  var previousLoopTime;\n\n  function loop(now) {\n    // Must be requested before cb() because that might call .stop()\n    requestId = request(loop, requestParameter); // Called with \"ms since last call\". 0 on start()\n\n    cb(now - (previousLoopTime || now));\n    previousLoopTime = now;\n  }\n\n  return {\n    start: function start() {\n      if (!requestId) {\n        // Prevent double starts\n        loop(0);\n      }\n    },\n    stop: function stop() {\n      cancel(requestId);\n      requestId = null;\n      previousLoopTime = 0;\n    }\n  };\n}\n\nfunction frameIntervalometer(cb) {\n  return intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);\n}\n\nfunction timerIntervalometer(cb, delay) {\n  return intervalometer(cb, setTimeout, clearTimeout, delay);\n}\n\nexport { intervalometer, frameIntervalometer, timerIntervalometer };","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/react-navbar-dropdown-master/node_modules/intervalometer/dist/intervalometer.es-modules.js"],"names":["intervalometer","cb","request","cancel","requestParameter","requestId","previousLoopTime","loop","now","start","stop","frameIntervalometer","requestAnimationFrame","cancelAnimationFrame","timerIntervalometer","delay","setTimeout","clearTimeout"],"mappings":"AAAA;AACA,SAASA,cAAT,CAAwBC,EAAxB,EAA4BC,OAA5B,EAAqCC,MAArC,EAA6CC,gBAA7C,EAA+D;AAC9D,MAAIC,SAAJ;AACA,MAAIC,gBAAJ;;AACA,WAASC,IAAT,CAAcC,GAAd,EAAmB;AAClB;AACAH,IAAAA,SAAS,GAAGH,OAAO,CAACK,IAAD,EAAOH,gBAAP,CAAnB,CAFkB,CAIlB;;AACAH,IAAAA,EAAE,CAACO,GAAG,IAAIF,gBAAgB,IAAIE,GAAxB,CAAJ,CAAF;AAEAF,IAAAA,gBAAgB,GAAGE,GAAnB;AACA;;AAED,SAAO;AACNC,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACvB,UAAI,CAACJ,SAAL,EAAgB;AAAE;AACjBE,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD,KALK;AAMNG,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACrBP,MAAAA,MAAM,CAACE,SAAD,CAAN;AACAA,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,gBAAgB,GAAG,CAAnB;AACA;AAVK,GAAP;AAYA;;AAED,SAASK,mBAAT,CAA6BV,EAA7B,EAAiC;AAChC,SAAOD,cAAc,CAACC,EAAD,EAAKW,qBAAL,EAA4BC,oBAA5B,CAArB;AACA;;AAED,SAASC,mBAAT,CAA6Bb,EAA7B,EAAiCc,KAAjC,EAAwC;AACvC,SAAOf,cAAc,CAACC,EAAD,EAAKe,UAAL,EAAiBC,YAAjB,EAA+BF,KAA/B,CAArB;AACA;;AAED,SAASf,cAAT,EAAyBW,mBAAzB,EAA8CG,mBAA9C","sourcesContent":["/*! npm.im/intervalometer */\nfunction intervalometer(cb, request, cancel, requestParameter) {\n\tvar requestId;\n\tvar previousLoopTime;\n\tfunction loop(now) {\n\t\t// Must be requested before cb() because that might call .stop()\n\t\trequestId = request(loop, requestParameter);\n\n\t\t// Called with \"ms since last call\". 0 on start()\n\t\tcb(now - (previousLoopTime || now));\n\n\t\tpreviousLoopTime = now;\n\t}\n\n\treturn {\n\t\tstart: function start() {\n\t\t\tif (!requestId) { // Prevent double starts\n\t\t\t\tloop(0);\n\t\t\t}\n\t\t},\n\t\tstop: function stop() {\n\t\t\tcancel(requestId);\n\t\t\trequestId = null;\n\t\t\tpreviousLoopTime = 0;\n\t\t}\n\t};\n}\n\nfunction frameIntervalometer(cb) {\n\treturn intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);\n}\n\nfunction timerIntervalometer(cb, delay) {\n\treturn intervalometer(cb, setTimeout, clearTimeout, delay);\n}\n\nexport { intervalometer, frameIntervalometer, timerIntervalometer };"]},"metadata":{},"sourceType":"module"}